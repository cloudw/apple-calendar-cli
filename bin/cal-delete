#!/usr/bin/osascript
-- Delete events by ID from a calendar
-- Usage: ./cal-delete <calendar_name> <event_id1> [event_id2] [event_id3] ...
-- Output: JSON object with deletion results

on run argv
    if length of argv < 2 then
        return "{\"error\": \"Usage: cal-delete <calendar_name> <event_id1> [event_id2] [event_id3] ...\"}"
    end if
    
    try
        set calendarName to item 1 of argv
        set eventIds to items 2 thru -1 of argv
        
        set results to delete_events_by_ids(calendarName, eventIds)
        set jsonOutput to format_delete_results(calendarName, results)
        
        return jsonOutput
    on error errMsg
        return "{\"error\": \"" & escapeJSONString(errMsg) & "\"}"
    end try
end run

on delete_events_by_ids(calendarName, eventIds)
    set results to {}
    set totalDeleted to 0
    
    tell application "Calendar"
        tell calendar calendarName
            repeat with eventId in eventIds
                try
                    set eventToDelete to event id eventId
                    set eventTitle to summary of eventToDelete
                    delete eventToDelete
                    set end of results to {event_id:eventId, event_title:eventTitle, status:"deleted"}
                    set totalDeleted to totalDeleted + 1
                on error deleteErr
                    set end of results to {event_id:eventId, event_title:"", status:"error", error_message:deleteErr}
                end try
            end repeat
        end tell
    end tell
    
    return {total_deleted:totalDeleted, individual_results:results}
end delete_events_by_ids

on format_delete_results(calendarName, results)
    set totalDeleted to total_deleted of results
    set individualResults to individual_results of results
    
    set jsonOutput to "{"
    set jsonOutput to jsonOutput & "\"status\": \"batch_deleted\","
    set jsonOutput to jsonOutput & "\"calendar\": \"" & escapeJSONString(calendarName) & "\","
    set jsonOutput to jsonOutput & "\"totalEventsDeleted\": " & totalDeleted & ","
    set jsonOutput to jsonOutput & "\"results\": ["
    
    set first to true
    repeat with result in individualResults
        if not first then set jsonOutput to jsonOutput & ","
        set first to false
        
        set jsonOutput to jsonOutput & "{"
        set jsonOutput to jsonOutput & "\"eventId\": \"" & (event_id of result) & "\","
        set jsonOutput to jsonOutput & "\"eventTitle\": \"" & escapeJSONString(event_title of result) & "\","
        set jsonOutput to jsonOutput & "\"status\": \"" & (status of result) & "\""
        
        if status of result is "error" then
            set jsonOutput to jsonOutput & ",\"error\": \"" & escapeJSONString(error_message of result) & "\""
        end if
        
        set jsonOutput to jsonOutput & "}"
    end repeat
    
    set jsonOutput to jsonOutput & "]"
    set jsonOutput to jsonOutput & "}"
    
    return jsonOutput
end format_delete_results

on escapeJSONString(inputString)
    if inputString is missing value then return ""
    if inputString is "" then return ""
    
    set cleanedString to inputString as string
    
    -- Limit length to prevent JSON corruption
    if length of cleanedString > 500 then
        set cleanedString to (characters 1 thru 500 of cleanedString as string) & "..."
    end if
    
    -- Escape JSON special characters
    set escapedString to cleanedString
    
    -- Replace backslashes first (must be first)
    set escapedString to my replaceText(escapedString, "\\", "\\\\")
    
    -- Replace quotes
    set escapedString to my replaceText(escapedString, "\"", "\\\"")
    
    -- Replace newlines and returns
    set escapedString to my replaceText(escapedString, return, "\\n")
    set escapedString to my replaceText(escapedString, linefeed, "\\n")
    
    -- Replace tabs
    set escapedString to my replaceText(escapedString, tab, "\\t")
    
    -- Replace other problematic characters
    set escapedString to my replaceText(escapedString, "\r", "\\r")
    
    return escapedString
end escapeJSONString

on replaceText(inputString, searchString, replaceString)
    set AppleScript's text item delimiters to searchString
    set textItems to text items of inputString
    set AppleScript's text item delimiters to replaceString
    set outputString to textItems as string
    set AppleScript's text item delimiters to ""
    return outputString
end replaceText